-- Challenge - Joining on multiple tables
-- 1. List the number of films per category.
USE sakila;
select category.name as category_film ,  count(*) as number_of_films 
FROM film_category as fc 
INNER JOIN category ON fc.category_id = category.category_id
group by category_film  
ORDER BY number_of_films DESC;

-- 2 Retrieve the store ID, city, and country for each store. 
SELECT store_id , city, country 
FROM store
LEFT JOIN address ON store.address_id = address.address_id
INNER JOIN city ON city.city_id = address.city_id 
INNER JOIN  country ON country.country_id = city.country_id ;

-- 3 Calculate the total revenue generated by each store in dollars.
select store.store_id , sum(payment.amount) as total_revenue 
 From store 
 inner join staff on staff.store_id = store.store_id
 inner join payment on payment.staff_id = staff.staff_id
 group by store.store_id ; 
 
 -- 4 Determine the average running time of films for each category.
select category.name as category_film ,  count(film.length) as average_running
FROM film 
INNER JOIN film_category AS fc ON film.film_id = fc.film_id
INNER JOIN category ON fc.category_id = category.category_id
group by category_film  
ORDER BY average_running DESC;
 
 -- BONUS
 -- 5 Identify the film categories with the longest average running time.
SELECT category.name AS category_film, AVG(film.length) AS longest_film  
FROM film_category AS fc 
INNER JOIN category ON fc.category_id = category.category_id
INNER JOIN film ON film.film_id = fc.film_id
GROUP BY category_film  
ORDER BY longest_films DESC;

-- 6 Display the top 10 most frequently rented movies in descending order.
SELECT film.title as Name_movie , count(rental.rental_date) as frequence 
From inventory 
INNER JOIN film ON inventory.film_id = film.film_id
INNER JOIN rental ON inventory.inventory_id = rental.inventory_id
group by Name_movie
order by frequence DESC ; 

-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT film.title , film.film_id  , inventory.store_id
from inventory 
inner join film on film.film_id = inventory.film_id
where film.title like "%Academy Dinosaur%" and inventory.store_id  = 1 ; 

-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL.
